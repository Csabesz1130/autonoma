version: '3.8'

services:
  # Frontend - Next.js 14
  frontend:
    build:
      context: ./frontend-nextjs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./frontend-nextjs:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - autonoma-network

  # Backend - FastAPI with AI capabilities
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://autonoma:autonoma123@postgres:5432/autonoma_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-super-secret-key-change-in-production}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8001
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - ./generated_projects:/app/generated_projects
    depends_on:
      - postgres
      - redis
      - chromadb
    networks:
      - autonoma-network

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://autonoma:autonoma123@postgres:5432/autonoma_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./backend:/app
      - ./generated_projects:/app/generated_projects
    depends_on:
      - postgres
      - redis
    networks:
      - autonoma-network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://autonoma:autonoma123@postgres:5432/autonoma_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - autonoma-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=autonoma
      - POSTGRES_PASSWORD=autonoma123
      - POSTGRES_DB=autonoma_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - autonoma-network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - autonoma-network

  # ChromaDB for vector embeddings
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8002:8000"
    environment:
      - CHROMA_HOST_TYPE=hosted
      - CHROMA_HOST_ADDR=0.0.0.0
      - CHROMA_HOST_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - autonoma-network

  # MCP Server for AI agent coordination
  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    ports:
      - "8001:8001"
    environment:
      - MCP_SERVER_PORT=8001
      - REDIS_URL=redis://redis:6379/3
      - CHROMADB_URL=http://chromadb:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - chromadb
    networks:
      - autonoma-network

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - autonoma-network
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - autonoma-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - autonoma-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  prometheus_data:
  grafana_data:

networks:
  autonoma-network:
    driver: bridge