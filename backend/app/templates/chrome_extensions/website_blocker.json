{
  "name": "Focus Website Blocker",
  "description": "A productivity extension that blocks distracting websites during work hours",
  "type": "content_script",
  "complexity": "Medium",
  "estimated_time": "20-30 minutes",
  "permissions": ["storage", "activeTab", "scripting", "notifications"],
  "host_permissions": ["<all_urls>"],
  "manifest": {
    "manifest_version": 3,
    "name": "AI Generated Focus Blocker",
    "version": "1.0.0",
    "description": "Block distracting websites to improve focus and productivity",
    "permissions": ["storage", "activeTab", "scripting", "notifications"],
    "host_permissions": ["<all_urls>"],
    "content_scripts": [
      {
        "matches": ["<all_urls>"],
        "js": ["content.js"],
        "css": ["content.css"],
        "run_at": "document_start"
      }
    ],
    "action": {
      "default_popup": "popup.html",
      "default_title": "Focus Blocker"
    },
    "background": {
      "service_worker": "background.js"
    },
    "icons": {
      "16": "icons/icon16.png",
      "32": "icons/icon32.png", 
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "files": {
    "content.js": "class FocusBlocker {\n  constructor() {\n    this.isBlocked = false;\n    this.settings = {};\n    this.init();\n  }\n\n  async init() {\n    await this.loadSettings();\n    this.checkSiteStatus();\n  }\n\n  async loadSettings() {\n    return new Promise((resolve) => {\n      chrome.storage.sync.get([\n        'blockedSites',\n        'isEnabled',\n        'workHours',\n        'allowBreaks',\n        'breakDuration'\n      ], (result) => {\n        this.settings = {\n          blockedSites: result.blockedSites || [\n            'facebook.com', 'twitter.com', 'instagram.com',\n            'youtube.com', 'reddit.com', 'tiktok.com',\n            'netflix.com', 'hulu.com', 'twitch.tv'\n          ],\n          isEnabled: result.isEnabled !== false,\n          workHours: result.workHours || { start: 9, end: 17 },\n          allowBreaks: result.allowBreaks || false,\n          breakDuration: result.breakDuration || 5\n        };\n        resolve();\n      });\n    });\n  }\n\n  checkSiteStatus() {\n    if (!this.settings.isEnabled) return;\n\n    const currentHour = new Date().getHours();\n    const isWorkHours = currentHour >= this.settings.workHours.start && \n                       currentHour < this.settings.workHours.end;\n\n    if (!isWorkHours && this.settings.workHours.start !== this.settings.workHours.end) {\n      return; // Not in work hours\n    }\n\n    const currentSite = window.location.hostname.replace('www.', '');\n    const isBlockedSite = this.settings.blockedSites.some(site => \n      currentSite.includes(site) || site.includes(currentSite)\n    );\n\n    if (isBlockedSite) {\n      this.blockSite();\n    }\n  }\n\n  blockSite() {\n    if (this.isBlocked) return;\n    \n    this.isBlocked = true;\n    \n    // Hide page content\n    document.documentElement.style.display = 'none';\n    \n    // Create block overlay\n    this.createBlockOverlay();\n    \n    // Track blocked attempt\n    this.trackBlockedAttempt();\n  }\n\n  createBlockOverlay() {\n    const overlay = document.createElement('div');\n    overlay.id = 'focus-blocker-overlay';\n    overlay.innerHTML = `\n      <div class=\"blocker-container\">\n        <div class=\"blocker-icon\">ðŸš«</div>\n        <h1>Site Blocked</h1>\n        <p>This site is blocked during your focus time.</p>\n        <div class=\"motivation\">\n          <p>\"Success is the sum of small efforts repeated day in and day out.\"</p>\n          <span>- Robert Collier</span>\n        </div>\n        <div class=\"stats\" id=\"blocker-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\" id=\"blocks-today\">0</span>\n            <span class=\"stat-label\">Blocks Today</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\" id=\"focus-time\">0h</span>\n            <span class=\"stat-label\">Focus Time</span>\n          </div>\n        </div>\n        <div class=\"actions\">\n          <button id=\"take-break-btn\" class=\"btn secondary\">Take 5min Break</button>\n          <button id=\"back-to-work-btn\" class=\"btn primary\">Back to Work</button>\n        </div>\n        <div class=\"timer\" id=\"break-timer\" style=\"display: none;\">\n          <span>Break ends in: </span>\n          <span id=\"break-countdown\">5:00</span>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(overlay);\n    document.documentElement.style.display = 'block';\n    \n    this.bindOverlayEvents();\n    this.loadStats();\n  }\n\n  bindOverlayEvents() {\n    const takeBreakBtn = document.getElementById('take-break-btn');\n    const backToWorkBtn = document.getElementById('back-to-work-btn');\n    \n    takeBreakBtn?.addEventListener('click', () => {\n      if (this.settings.allowBreaks) {\n        this.startBreak();\n      } else {\n        this.showMessage('Breaks are disabled in your settings.');\n      }\n    });\n    \n    backToWorkBtn?.addEventListener('click', () => {\n      this.redirectToProductiveSite();\n    });\n  }\n\n  startBreak() {\n    const breakTimer = document.getElementById('break-timer');\n    const countdown = document.getElementById('break-countdown');\n    const actionsDiv = document.querySelector('.actions');\n    \n    if (breakTimer && countdown && actionsDiv) {\n      actionsDiv.style.display = 'none';\n      breakTimer.style.display = 'block';\n      \n      let timeLeft = this.settings.breakDuration * 60; // Convert to seconds\n      \n      const interval = setInterval(() => {\n        const minutes = Math.floor(timeLeft / 60);\n        const seconds = timeLeft % 60;\n        countdown.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n        \n        timeLeft--;\n        \n        if (timeLeft < 0) {\n          clearInterval(interval);\n          this.endBreak();\n        }\n      }, 1000);\n    }\n  }\n\n  endBreak() {\n    this.showMessage('Break time is over! Time to get back to work.');\n    setTimeout(() => {\n      this.redirectToProductiveSite();\n    }, 2000);\n  }\n\n  redirectToProductiveSite() {\n    const productiveSites = [\n      'https://calendar.google.com',\n      'https://docs.google.com',\n      'https://github.com',\n      'https://stackoverflow.com',\n      'https://coursera.org'\n    ];\n    \n    const randomSite = productiveSites[Math.floor(Math.random() * productiveSites.length)];\n    window.location.href = randomSite;\n  }\n\n  async trackBlockedAttempt() {\n    const today = new Date().toDateString();\n    \n    chrome.storage.local.get([`blocks_${today}`, 'totalBlocks'], (result) => {\n      const blocksToday = (result[`blocks_${today}`] || 0) + 1;\n      const totalBlocks = (result.totalBlocks || 0) + 1;\n      \n      chrome.storage.local.set({\n        [`blocks_${today}`]: blocksToday,\n        totalBlocks: totalBlocks,\n        lastBlockTime: new Date().toISOString()\n      });\n    });\n  }\n\n  loadStats() {\n    const today = new Date().toDateString();\n    \n    chrome.storage.local.get([`blocks_${today}`, 'focusTime'], (result) => {\n      const blocksToday = result[`blocks_${today}`] || 0;\n      const focusTime = result.focusTime || 0;\n      \n      const blocksTodayEl = document.getElementById('blocks-today');\n      const focusTimeEl = document.getElementById('focus-time');\n      \n      if (blocksTodayEl) blocksTodayEl.textContent = blocksToday.toString();\n      if (focusTimeEl) focusTimeEl.textContent = `${Math.floor(focusTime / 60)}h ${focusTime % 60}m`;\n    });\n  }\n\n  showMessage(message) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = 'blocker-message';\n    messageDiv.textContent = message;\n    \n    const container = document.querySelector('.blocker-container');\n    if (container) {\n      container.appendChild(messageDiv);\n      \n      setTimeout(() => {\n        messageDiv.remove();\n      }, 3000);\n    }\n  }\n}\n\n// Initialize the blocker\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new FocusBlocker());\n} else {\n  new FocusBlocker();\n}",
    "content.css": "#focus-blocker-overlay {\n  position: fixed !important;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100vw !important;\n  height: 100vh !important;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n  z-index: 2147483647 !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n  color: white !important;\n}\n\n.blocker-container {\n  text-align: center !important;\n  max-width: 500px !important;\n  padding: 40px !important;\n  background: rgba(255, 255, 255, 0.1) !important;\n  border-radius: 20px !important;\n  backdrop-filter: blur(10px) !important;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1) !important;\n}\n\n.blocker-icon {\n  font-size: 60px !important;\n  margin-bottom: 20px !important;\n}\n\n.blocker-container h1 {\n  font-size: 32px !important;\n  margin-bottom: 10px !important;\n  font-weight: 700 !important;\n  color: white !important;\n}\n\n.blocker-container p {\n  font-size: 16px !important;\n  margin-bottom: 20px !important;\n  opacity: 0.9 !important;\n  color: white !important;\n}\n\n.motivation {\n  background: rgba(255, 255, 255, 0.1) !important;\n  padding: 20px !important;\n  border-radius: 12px !important;\n  margin: 30px 0 !important;\n  font-style: italic !important;\n}\n\n.motivation p {\n  margin-bottom: 10px !important;\n  font-size: 14px !important;\n}\n\n.motivation span {\n  font-size: 12px !important;\n  opacity: 0.7 !important;\n}\n\n.stats {\n  display: flex !important;\n  justify-content: space-around !important;\n  margin: 30px 0 !important;\n  background: rgba(255, 255, 255, 0.1) !important;\n  padding: 20px !important;\n  border-radius: 12px !important;\n}\n\n.stat {\n  text-align: center !important;\n}\n\n.stat-number {\n  display: block !important;\n  font-size: 24px !important;\n  font-weight: bold !important;\n  color: #FFD700 !important;\n}\n\n.stat-label {\n  font-size: 12px !important;\n  opacity: 0.8 !important;\n  margin-top: 5px !important;\n  display: block !important;\n}\n\n.actions {\n  display: flex !important;\n  gap: 15px !important;\n  justify-content: center !important;\n  margin-top: 30px !important;\n}\n\n.btn {\n  padding: 12px 24px !important;\n  border: none !important;\n  border-radius: 8px !important;\n  font-weight: 600 !important;\n  cursor: pointer !important;\n  transition: all 0.2s ease !important;\n  font-size: 14px !important;\n}\n\n.btn.primary {\n  background: #4CAF50 !important;\n  color: white !important;\n}\n\n.btn.secondary {\n  background: rgba(255, 255, 255, 0.2) !important;\n  color: white !important;\n}\n\n.btn:hover {\n  transform: translateY(-2px) !important;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;\n}\n\n.timer {\n  margin-top: 20px !important;\n  padding: 15px !important;\n  background: rgba(255, 255, 255, 0.1) !important;\n  border-radius: 8px !important;\n  font-size: 18px !important;\n  font-weight: bold !important;\n}\n\n#break-countdown {\n  color: #FFD700 !important;\n  font-family: 'Courier New', monospace !important;\n}\n\n.blocker-message {\n  margin-top: 15px !important;\n  padding: 10px 15px !important;\n  background: rgba(76, 175, 80, 0.8) !important;\n  border-radius: 6px !important;\n  font-size: 14px !important;\n  animation: slideIn 0.3s ease-out !important;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(20px) !important;\n    opacity: 0 !important;\n  }\n  to {\n    transform: translateY(0) !important;\n    opacity: 1 !important;\n  }\n}",
    "popup.html": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Focus Blocker</title>\n  <link rel=\"stylesheet\" href=\"popup.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>ðŸš« Focus Blocker</h1>\n    \n    <div class=\"toggle-section\">\n      <label class=\"toggle\">\n        <input type=\"checkbox\" id=\"enable-blocker\">\n        <span class=\"toggle-slider\"></span>\n      </label>\n      <span id=\"status-text\">Blocking Enabled</span>\n    </div>\n    \n    <div class=\"stats-section\">\n      <div class=\"stat-card\">\n        <span class=\"stat-number\" id=\"blocks-today\">0</span>\n        <span class=\"stat-label\">Blocks Today</span>\n      </div>\
      <div class=\"stat-card\">\n        <span class=\"stat-number\" id=\"focus-streak\">0</span>\n        <span class=\"stat-label\">Day Streak</span>\n      </div>\n    </div>\n    \n    <div class=\"quick-actions\">\n      <button id=\"add-site-btn\" class=\"btn secondary\">Block Current Site</button>\n      <button id=\"settings-btn\" class=\"btn primary\">Settings</button>\n    </div>\n    \n    <div class=\"blocked-sites\" id=\"blocked-sites-list\">\n      <h3>Blocked Sites</h3>\n      <div class=\"sites-list\" id=\"sites-container\">\n        <!-- Sites will be loaded here -->\n      </div>\n    </div>\n  </div>\n  <script src=\"popup.js\"></script>\n</body>\n</html>",
    "popup.css": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 320px;\n  min-height: 500px;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: #f8f9fa;\n  color: #333;\n}\n\n.container {\n  padding: 20px;\n}\n\nh1 {\n  text-align: center;\n  margin-bottom: 20px;\n  font-size: 18px;\n  color: #495057;\n}\n\n.toggle-section {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.toggle {\n  position: relative;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n}\n\n.toggle input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.3s;\n  border-radius: 24px;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: \"\";\n  height: 18px;\n  width: 18px;\n  left: 3px;\n  bottom: 3px;\n  background-color: white;\n  transition: 0.3s;\n  border-radius: 50%;\n}\n\ninput:checked + .toggle-slider {\n  background-color: #4CAF50;\n}\n\ninput:checked + .toggle-slider:before {\n  transform: translateX(26px);\n}\n\n#status-text {\n  font-weight: 600;\n  color: #495057;\n}\n\n.stats-section {\n  display: flex;\n  gap: 15px;\n  margin-bottom: 25px;\n}\n\n.stat-card {\n  flex: 1;\n  text-align: center;\n  padding: 15px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.stat-number {\n  display: block;\n  font-size: 24px;\n  font-weight: bold;\n  color: #667eea;\n}\n\n.stat-label {\n  font-size: 11px;\n  color: #6c757d;\n  margin-top: 5px;\n  display: block;\n}\n\n.quick-actions {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 25px;\n}\n\n.btn {\n  flex: 1;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 12px;\n}\n\n.btn.primary {\n  background: #667eea;\n  color: white;\n}\n\n.btn.secondary {\n  background: #e9ecef;\n  color: #495057;\n}\n\n.btn:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.blocked-sites {\n  background: white;\n  border-radius: 10px;\n  padding: 15px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.blocked-sites h3 {\n  font-size: 14px;\n  margin-bottom: 10px;\n  color: #495057;\n}\n\n.sites-list {\n  max-height: 150px;\n  overflow-y: auto;\n}\n\n.site-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #e9ecef;\n}\n\n.site-item:last-child {\n  border-bottom: none;\n}\n\n.site-name {\n  font-size: 12px;\n  color: #495057;\n}\n\n.remove-site {\n  background: none;\n  border: none;\n  color: #dc3545;\n  cursor: pointer;\n  font-size: 14px;\n  padding: 2px;\n}\n\n.remove-site:hover {\n  color: #c82333;\n}",
    "popup.js": "class FocusBlockerPopup {\n  constructor() {\n    this.initializeElements();\n    this.loadSettings();\n    this.loadStats();\n    this.bindEvents();\n  }\n\n  initializeElements() {\n    this.enableToggle = document.getElementById('enable-blocker');\n    this.statusText = document.getElementById('status-text');\n    this.blocksTodayEl = document.getElementById('blocks-today');\n    this.focusStreakEl = document.getElementById('focus-streak');\n    this.addSiteBtn = document.getElementById('add-site-btn');\n    this.settingsBtn = document.getElementById('settings-btn');\n    this.sitesContainer = document.getElementById('sites-container');\n  }\n\n  bindEvents() {\n    this.enableToggle.addEventListener('change', () => this.toggleBlocking());\n    this.addSiteBtn.addEventListener('click', () => this.addCurrentSite());\n    this.settingsBtn.addEventListener('click', () => this.openSettings());\n  }\n\n  loadSettings() {\n    chrome.storage.sync.get(['isEnabled', 'blockedSites'], (result) => {\n      const isEnabled = result.isEnabled !== false;\n      this.enableToggle.checked = isEnabled;\n      this.statusText.textContent = isEnabled ? 'Blocking Enabled' : 'Blocking Disabled';\n      \n      const blockedSites = result.blockedSites || [];\n      this.renderBlockedSites(blockedSites);\n    });\n  }\n\n  loadStats() {\n    const today = new Date().toDateString();\n    \n    chrome.storage.local.get([`blocks_${today}`, 'focusStreak'], (result) => {\n      const blocksToday = result[`blocks_${today}`] || 0;\n      const focusStreak = result.focusStreak || 0;\n      \n      this.blocksTodayEl.textContent = blocksToday.toString();\n      this.focusStreakEl.textContent = focusStreak.toString();\n    });\n  }\n\n  toggleBlocking() {\n    const isEnabled = this.enableToggle.checked;\n    \n    chrome.storage.sync.set({ isEnabled }, () => {\n      this.statusText.textContent = isEnabled ? 'Blocking Enabled' : 'Blocking Disabled';\n    });\n  }\n\n  async addCurrentSite() {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      const url = new URL(tab.url);\n      const hostname = url.hostname.replace('www.', '');\n      \n      chrome.storage.sync.get(['blockedSites'], (result) => {\n        const blockedSites = result.blockedSites || [];\n        \n        if (!blockedSites.includes(hostname)) {\n          blockedSites.push(hostname);\n          \n          chrome.storage.sync.set({ blockedSites }, () => {\n            this.renderBlockedSites(blockedSites);\n            this.showMessage('Site added to blocked list!');\n          });\n        } else {\n          this.showMessage('Site is already blocked!');\n        }\n      });\n    } catch (error) {\n      console.error('Error adding site:', error);\n    }\n  }\n\n  renderBlockedSites(sites) {\n    this.sitesContainer.innerHTML = '';\n    \n    if (sites.length === 0) {\n      this.sitesContainer.innerHTML = '<p style=\"text-align: center; color: #6c757d; font-size: 12px;\">No blocked sites</p>';\n      return;\n    }\n    \n    sites.forEach(site => {\n      const siteItem = document.createElement('div');\n      siteItem.className = 'site-item';\n      siteItem.innerHTML = `\n        <span class=\"site-name\">${site}</span>\n        <button class=\"remove-site\" data-site=\"${site}\">Ã—</button>\n      `;\n      \n      const removeBtn = siteItem.querySelector('.remove-site');\n      removeBtn.addEventListener('click', () => this.removeSite(site));\n      \n      this.sitesContainer.appendChild(siteItem);\n    });\n  }\n\n  removeSite(siteToRemove) {\n    chrome.storage.sync.get(['blockedSites'], (result) => {\n      const blockedSites = result.blockedSites || [];\n      const updatedSites = blockedSites.filter(site => site !== siteToRemove);\n      \n      chrome.storage.sync.set({ blockedSites: updatedSites }, () => {\n        this.renderBlockedSites(updatedSites);\n        this.showMessage('Site removed from blocked list!');\n      });\n    });\n  }\n\n  openSettings() {\n    chrome.runtime.openOptionsPage();\n  }\n\n  showMessage(message) {\n    // Simple toast message\n    const toast = document.createElement('div');\n    toast.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: #4CAF50;\n      color: white;\n      padding: 8px 12px;\n      border-radius: 4px;\n      font-size: 12px;\n      z-index: 1000;\n    `;\n    toast.textContent = message;\n    \n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n      toast.remove();\n    }, 2000);\n  }\n}\n\n// Initialize popup\ndocument.addEventListener('DOMContentLoaded', () => {\n  new FocusBlockerPopup();\n});",
    "background.js": "class FocusBlockerBackground {\n  constructor() {\n    this.setupEventListeners();\n    this.initializeDailyReset();\n  }\n\n  setupEventListeners() {\n    // Listen for tab updates\n    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      if (changeInfo.status === 'complete' && tab.url) {\n        this.checkAndNotify(tab.url);\n      }\n    });\n\n    // Listen for extension icon clicks\n    chrome.action.onClicked.addListener(() => {\n      chrome.action.openPopup();\n    });\n\n    // Handle installation\n    chrome.runtime.onInstalled.addListener(() => {\n      this.initializeSettings();\n    });\n  }\n\n  initializeSettings() {\n    const defaultSettings = {\n      isEnabled: true,\n      blockedSites: [\n        'facebook.com', 'twitter.com', 'instagram.com',\n        'youtube.com', 'reddit.com', 'tiktok.com',\n        'netflix.com', 'hulu.com', 'twitch.tv'\n      ],\n      workHours: { start: 9, end: 17 },\n      allowBreaks: false,\n      breakDuration: 5\n    };\n\n    chrome.storage.sync.get(Object.keys(defaultSettings), (result) => {\n      const updates = {};\n      \n      Object.keys(defaultSettings).forEach(key => {\n        if (result[key] === undefined) {\n          updates[key] = defaultSettings[key];\n        }\n      });\n      \n      if (Object.keys(updates).length > 0) {\n        chrome.storage.sync.set(updates);\n      }\n    });\n  }\n\n  checkAndNotify(url) {\n    try {\n      const hostname = new URL(url).hostname.replace('www.', '');\n      \n      chrome.storage.sync.get(['blockedSites', 'isEnabled'], (result) => {\n        if (!result.isEnabled) return;\n        \n        const blockedSites = result.blockedSites || [];\n        const isBlocked = blockedSites.some(site => \n          hostname.includes(site) || site.includes(hostname)\n        );\n        \n        if (isBlocked) {\n          this.updateFocusStreak();\n        }\n      });\n    } catch (error) {\n      // Invalid URL, ignore\n    }\n  }\n\n  updateFocusStreak() {\n    const today = new Date().toDateString();\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\n    \n    chrome.storage.local.get(['lastFocusDay', 'focusStreak'], (result) => {\n      let focusStreak = result.focusStreak || 0;\n      const lastFocusDay = result.lastFocusDay;\n      \n      if (lastFocusDay === yesterday) {\n        // Continuing streak\n        focusStreak += 1;\n      } else if (lastFocusDay !== today) {\n        // New streak or reset\n        focusStreak = 1;\n      }\n      \n      chrome.storage.local.set({\n        focusStreak,\n        lastFocusDay: today\n      });\n    });\n  }\n\n  initializeDailyReset() {\n    // Reset daily stats at midnight\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    \n    const msUntilMidnight = tomorrow.getTime() - now.getTime();\n    \n    setTimeout(() => {\n      this.resetDailyStats();\n      // Set up daily interval\n      setInterval(() => this.resetDailyStats(), 24 * 60 * 60 * 1000);\n    }, msUntilMidnight);\n  }\n\n  resetDailyStats() {\n    const today = new Date().toDateString();\n    chrome.storage.local.set({\n      [`blocks_${today}`]: 0\n    });\n  }\n}\n\n// Initialize background script\nnew FocusBlockerBackground();"
  },
  "install_instructions": [
    "1. Download and extract the extension files",
    "2. Open Chrome and navigate to chrome://extensions/",
    "3. Enable 'Developer mode' in the top right corner",
    "4. Click 'Load unpacked' and select the extension folder",
    "5. Grant necessary permissions when prompted",
    "6. The Focus Blocker icon will appear in your toolbar",
    "7. Configure your blocked sites and work hours in the popup",
    "8. Visit any blocked site to see the blocker in action!"
  ],
  "features": [
    "Real-time website blocking during work hours",
    "Customizable work schedule (9am-5pm default)",
    "Break system with configurable duration",
    "Daily blocking statistics and focus streak tracking",
    "Motivational quotes on blocked pages",
    "Easy site management through popup interface",
    "Redirect to productive websites",
    "Background service for persistent blocking"
  ],
  "use_cases": [
    "Productivity enhancement for remote workers",
    "Focus improvement for students",
    "Social media addiction control",
    "Work-from-home discipline",
    "Time management and self-control",
    "Parental controls for shared computers"
  ]
}